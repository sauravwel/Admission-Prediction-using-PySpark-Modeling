# -*- coding: utf-8 -*-
"""PySpark Admission_likelihood_prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11HDMpsgdzkIPamu5IJaRSpH-WTD3_GLv

#### Import important libraries
"""

#!pip install pyspark
from __future__ import print_function
import pyspark
from pyspark.sql import SparkSession
from pyspark.ml.feature import VectorAssembler,VectorIndexer
from pyspark.ml.feature import VectorAssembler
from pyspark.ml.regression import LinearRegression
from pyspark.ml.regression import RandomForestRegressor
from pyspark.ml.evaluation import RegressionEvaluator

"""#### Load data and its details"""

spark = SparkSession.builder.appName("Admission Likelihood").getOrCreate()
dataframe = spark.read.csv("Admission_Prediction.csv",header=True)
dataframe.show()

dataframe.printSchema()

"""#### Data Cleaning"""

#Convert the type
from pyspark.sql.functions import col
new_dataframe = dataframe.select(*(col(c).cast("float").alias(c) for c in dataframe.columns))
new_dataframe.printSchema()

from pyspark.sql.functions import col, count, isnan, when
#check for null in columns
new_dataframe.select([count(when(col(c).isNull(), c)).alias(c) for c in new_dataframe.columns]).show()

#Impute the null value using inbuilt imputer
from pyspark.ml.feature import Imputer
imputer = Imputer(inputCols=["GRE Score", "TOEFL Score","University Rating"], 
                  outputCols=["GRE Score", "TOEFL Score","University Rating"])
model = imputer.fit(new_dataframe)

imputed_data = model.transform(new_dataframe)

imputed_data

#checking for null ir nan type values in our columns
imputed_data.select([count(when(col(c).isNull(), c)).alias(c) for c in imputed_data.columns]).show()

"""#### Model development"""

features = imputed_data.drop('Chance of Admit')
features

#let's assemble our features together using vectorAssembler
assembler = VectorAssembler( inputCols=features.columns,outputCol="features")
output = assembler.transform(imputed_data)

output= output.select("features", "Chance of Admit")
output = assembler.transform(imputed_data)
output= output.select("features", "Chance of Admit")

#train-test spilit
train_df,test_df = output.randomSplit([0.7, 0.3])
train_df.show()
test_df.show()

##Linear Regression Model
lin_reg = LinearRegression(featuresCol = 'features', labelCol='Chance of Admit')
linear_model = lin_reg.fit(train_df)
print("Coefficients: " + str(linear_model.coefficients))
print("Intercept: " + str(linear_model.intercept))

trainSummary = linear_model.summary
print("RMSE: %f" % trainSummary.rootMeanSquaredError)
print("r2: %f" % trainSummary.r2)

"""#### Model Evaluation"""

predictions = linear_model.transform(test_df)
predictions.select("prediction","Chance of Admit","features").show()

